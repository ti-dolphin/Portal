# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

analyzer:
  exclude:
    - "**/*.g.dart"
    - "**/*.freezed.dart"
  errors:
    invalid_annotation_target: ignore

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at
  # https://dart-lang.github.io/linter/lints/index.html.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    avoid_print: false #Avoid print calls in production code.
    prefer_single_quotes: true  # Only use double quotes for strings containing single quotes.
    always_use_package_imports: true # Avoid relative imports for files in lib/.
    avoid_dynamic_calls: false # Avoid method calls or property accesses on a "dynamic" target.
    avoid_empty_else: true # Avoid empty else statements.
    avoid_relative_lib_imports: true #Avoid relative imports for files in lib/.
    avoid_returning_null_for_future: true #Avoid returning null for Future.
    avoid_slow_async_io: true #Avoid slow async dart:io methods.
    avoid_type_to_string: true #Avoid .toString() in production code since results may be minified.
    avoid_types_as_parameter_names: false #Avoid types as parameter names.
    avoid_web_libraries_in_flutter: true #Avoid using web-only libraries outside Flutter web plugin packages.
    cancel_subscriptions: true #Cancel instances of dart.async.StreamSubscription.
    close_sinks: true #Close instances of dart.core.Sink.
    comment_references: true #Only reference in scope identifiers in doc comments.
    control_flow_in_finally: true #Avoid control flow in finally blocks.
    diagnostic_describe_all_properties: false #DO reference all public properties in debug methods.
    empty_statements: true #Avoid empty statements.
    hash_and_equals: true #Always override hashCode if overriding ==.
    collection_methods_unrelated_type: true #Invocation of remove with references of unrelated types.
    literal_only_boolean_expressions: true #Boolean expression composed only with literals.
    no_adjacent_strings_in_list: true #Don't use adjacent strings in list.
    no_duplicate_case_values: true #Don't use more than one case with same value.
    no_logic_in_create_state: true #Don't put any logic in createState.
    prefer_relative_imports: false #Prefer relative imports for files in lib/.
    prefer_void_to_null: true #Don't use the Null type, unless you are positive that you don't want void.
    test_types_in_equals: true #Test type arguments in operator ==(Object other).
    throw_in_finally: false #Avoid throw in finally block.
    unnecessary_statements: true #Avoid using unnecessary statements.
    unrelated_type_equality_checks: true #Equality operator == invocation with references of unrelated types.
    unsafe_html: true #Avoid unsafe HTML APIs.
    use_build_context_synchronously: true # (experimental) Do not use BuildContexts across async gaps.
    use_key_in_widget_constructors: true #Use key in widget constructors.
    valid_regexps: true #Use valid regular expression syntax.

    #Style Rules
    always_declare_return_types: true #Declare method return types.
    always_put_control_body_on_new_line: false #Separate the control structure expression from its statement.
    always_put_required_named_parameters_first: false #Put required named parameters first.
    always_require_non_null_named_parameters: true #Specify @required on named parameters without defaults.
    always_specify_types: false #Specify type annotations.
    annotate_overrides: true #Annotate overridden members.
    avoid_annotating_with_dynamic: true #Avoid annotating with dynamic when not required.
    avoid_bool_literals_in_conditional_expressions: false #Avoid bool literals in conditional expressions.
    avoid_catches_without_on_clauses: false #Avoid catches without on clauses.
    avoid_catching_errors: true #Don't explicitly catch Error or types that implement it.
    avoid_classes_with_only_static_members: false #Avoid defining a class that contains only static members.
    avoid_double_and_int_checks: true #Avoid double and int checks.
    avoid_equals_and_hash_code_on_mutable_classes: false #Avoid overloading operator == and hashCode on classes not marked @immutable.
    avoid_escaping_inner_quotes: true #Avoid escaping inner quotes by converting surrounding quotes.
    avoid_field_initializers_in_const_classes: true #Avoid field initializers in const classes.
    avoid_final_parameters: true #Avoid final for parameter declarations
    avoid_function_literals_in_foreach_calls: false #Avoid using forEach with a function literal.
    avoid_implementing_value_types: true #Don't implement classes that override ==.
    avoid_init_to_null: true #Don't explicitly initialize variables to null.
    avoid_js_rounded_ints: true #Avoid JavaScript rounded ints.
    avoid_multiple_declarations_per_line: true #Don't declare multiple variables on a single line.
    avoid_null_checks_in_equality_operators: true #Don't check for null in custom == operators.
    avoid_positional_boolean_parameters: false #Avoid positional boolean parameters.
    avoid_private_typedef_functions: true #Avoid private typedef functions.
    avoid_redundant_argument_values: true #Avoid redundant argument values.
    avoid_renaming_method_parameters: true #Don't rename parameters of overridden methods.
    avoid_return_types_on_setters: true #Avoid return types on setters.
    avoid_returning_null: true #Avoid returning null from members whose return type is bool, double, int, or num.
    avoid_returning_null_for_void: true #Avoid returning null for void.
    avoid_returning_this: true #Avoid returning this from methods just to enable a fluent interface.
    avoid_setters_without_getters: true #Avoid setters without getters.
    avoid_shadowing_type_parameters: true #Avoid shadowing type parameters.
    avoid_single_cascade_in_expression_statements: true #Avoid single cascade in expression statements.
    avoid_types_on_closure_parameters: false #Avoid annotating types for function expression parameters.
    avoid_unnecessary_containers: true #Avoid unnecessary containers.
    avoid_unused_constructor_parameters: true #Avoid defining unused parameters in constructors.
    avoid_void_async: true #Avoid async functions that return void.
    await_only_futures: true #Await only futures.
    camel_case_extensions: true #Name extensions using UpperCamelCase.
    camel_case_types: true #Name types using UpperCamelCase.
    cascade_invocations: false #Cascade consecutive method invocations on the same reference.
    cast_nullable_to_non_nullable: true # (experimental) Don't cast a nullable value to a non nullable type.
    conditional_uri_does_not_exist: true #Missing conditional import.
    constant_identifier_names: true #Prefer using lowerCamelCase for constant names.
    curly_braces_in_flow_control_structures: true #DO use curly braces for all flow control structures.
    deprecated_consistency: true #Missing deprecated annotation.
    directives_ordering: true #Adhere to Effective Dart Guide directives sorting conventions.
    do_not_use_environment: true #Do not use environment declared variables.
    empty_catches: true #Avoid empty catch blocks.
    empty_constructor_bodies: true #Use ; instead of {} for empty constructor bodies.
    eol_at_end_of_file: false #Put a single newline at end of file.
    exhaustive_cases: true #Define case clauses for all constants in enum-like classes.
    file_names: false # Name source files using lowercase_with_underscores.
    flutter_style_todos: false # Use Flutter TODO format: // TODO(username): message, https://URL-to-issue.
    implementation_imports: true # Don't import implementation files from another package.
    join_return_with_assignment: true # Join return statement with assignment when possible.
    leading_newlines_in_multiline_strings: true # Start multiline strings with a newline.
    library_names: true # Name libraries using lowercase_with_underscores.
    library_prefixes: true # Use lowercase_with_underscores when specifying a library prefix.
    library_private_types_in_public_api: false # Avoid using private types in public APIs.
    lines_longer_than_80_chars: false # Avoid lines longer than 80 characters.
    missing_whitespace_between_adjacent_strings: true # Missing whitespace between adjacent strings.
    no_default_cases: false # (experimental) No default cases.
    no_leading_underscores_for_library_prefixes: true # Avoid leading underscores for library prefixes.
    no_leading_underscores_for_local_identifiers: true # Avoid leading underscores for local identifiers.
    no_runtimeType_toString: true # Avoid calling toString() on runtimeType.
    non_constant_identifier_names: true # Name non-constant identifiers using lowerCamelCase.
    noop_primitive_operations: true # Noop primitive operations.
    null_check_on_nullable_type_parameter: true # Don't use null check on a potentially nullable type parameter.
    null_closures: true # Do not pass null as an argument where a closure is expected.
    omit_local_variable_types: false # Omit type annotations for local variables.
    one_member_abstracts: true # Avoid defining a one-member abstract class when a simple function will do.
    only_throw_errors: false # Only throw instances of classes extending either Exception or Error.
    overridden_fields: true # Don't override fields.
    package_api_docs: true # Provide doc comments for all public APIs.
    package_prefixed_library_names: true # Prefix library names with the package name and a dot-separated path.
    parameter_assignments: true # Don't reassign references to parameters of functions or methods.
    prefer_adjacent_string_concatenation: true # Use adjacent strings to concatenate string literals.
    prefer_asserts_in_initializer_lists: true # Prefer putting asserts in initializer lists.
    prefer_asserts_with_message: true # Prefer asserts with message.
    prefer_collection_literals: true # Use collection literals when possible.
    prefer_conditional_assignment: true # Prefer using ??= over testing for null.
    prefer_const_constructors: true # Prefer const with constant constructors.
    prefer_const_constructors_in_immutables: true # Prefer declaring const constructors on @immutable classes.
    prefer_const_declarations: true # Prefer const over final for declarations.
    prefer_const_literals_to_create_immutables: true # Prefer const literals as parameters of constructors on @immutable classes.
    prefer_constructors_over_static_methods: true # Prefer defining constructors instead of static methods to create instances.
    prefer_contains: true # Use contains for List and String instances.
    prefer_double_quotes: false # Prefer double quotes where they won't require escape sequences.
    prefer_equal_for_default_values: true # Use = to separate a named parameter from its default value.
    prefer_expression_function_bodies: false # Use => for short members whose body is a single return statement.
    prefer_final_fields: false # Private field could be final.
    prefer_final_in_for_each: false # Prefer final in for-each loop variable if reference is not reassigned.
    prefer_final_locals: false # Prefer final for variable declarations if they are not reassigned.
    prefer_final_parameters: false # Prefer final for parameter declarations if they are not reassigned.
    prefer_for_elements_to_map_fromIterable: true # Prefer for elements when building maps from iterables.
    prefer_foreach: true # Use forEach to only apply a function to all the elements.
    prefer_function_declarations_over_variables: true # Use a function declaration to bind a function to a name.
    prefer_generic_function_type_aliases: true # Prefer generic function type aliases.
    prefer_if_elements_to_conditional_expressions: false # Prefer if elements to conditional expressions where possible.
    prefer_if_null_operators: true # Prefer using if null operators.
    prefer_initializing_formals: true # Use initializing formals when possible.
    prefer_inlined_adds: true # Inline list item declarations where possible.
    prefer_int_literals: false # Prefer int literals over double literals.
    prefer_interpolation_to_compose_strings: true # Use interpolation to compose strings and values.
    prefer_is_empty: true # Use isEmpty for Iterables and Maps.
    prefer_is_not_empty: true # Use isNotEmpty for Iterables and Maps.
    prefer_is_not_operator: true # Prefer is! operator.
    prefer_iterable_whereType: true # Prefer to use whereType on iterable.
    prefer_mixin: true # Prefer using mixins.
    prefer_null_aware_method_calls: true # Prefer null aware method calls.
    prefer_null_aware_operators: true # Prefer using null aware operators.
    prefer_spread_collections: true # Use spread collections when possible.
    prefer_typing_uninitialized_variables: true # Prefer typing uninitialized variables and fields.
    provide_deprecation_message: true # Provide a deprecation message, via @Deprecated("message").
    public_member_api_docs: false # Document all public members.
    recursive_getters: true # Property getter recursively returns itself.
    require_trailing_commas: false #  (experimental) Use trailing commas for all function calls and declarations.
    sized_box_for_whitespace: true # SizedBox for whitespace.
    sized_box_shrink_expand: true # Use SizedBox shrink and expand named constructors.
    slash_for_doc_comments: true # Prefer using /// for doc comments.
    sort_child_properties_last: true # Sort child properties last in widget instance creations.
    sort_constructors_first: false # Sort constructor declarations before other members.
    sort_unnamed_constructors_first: true # Sort unnamed constructor declarations first.
    tighten_type_of_initializing_formals: true # Tighten type of initializing formal.
    type_annotate_public_apis: true # Type annotate public APIs.
    type_init_formals: true # Don't type annotate initializing formals.
    unawaited_futures: false # Future results in async function bodies must be awaited or marked unawaited using dart:async.
    unnecessary_await_in_return: true # Unnecessary await keyword in return.
    unnecessary_brace_in_string_interps: true # Avoid using braces in interpolation when not needed.
    unnecessary_const: true # Avoid const keyword.
    unnecessary_constructor_name: true # Unnecessary .new constructor name.
    unnecessary_final: true # Don't use final for local variables.
    unnecessary_getters_setters: true # Avoid wrapping fields in getters and setters just to be "safe".
    unnecessary_lambdas: false # Don't create a lambda when a tear-off will do.
    unnecessary_late: true # Don't specify the late modifier when it is not needed.
    unnecessary_new: true # Unnecessary new keyword.
    unnecessary_null_aware_assignments: true # Avoid null in null-aware assignment.
    unnecessary_null_checks: true #  (experimental) Unnecessary null checks.
    unnecessary_null_in_if_null_operators: true # Avoid using null in if null operators.
    unnecessary_nullable_for_final_variable_declarations: true #  (experimental) Use a non-nullable type for a final variable initialized with a non-nullable value.
    unnecessary_overrides: true # Don't override a method to do a super method invocation with the same parameters.
    unnecessary_parenthesis: true # Unnecessary parenthesis can be removed.
    unnecessary_raw_strings: true # Unnecessary raw string.
    unnecessary_string_escapes: true # Remove unnecessary backslashes in strings.
    unnecessary_string_interpolations: true # Unnecessary string interpolation.
    unnecessary_this: true # Don't access members with this unless avoiding shadowing.
    use_colored_box: true # Use ColoredBox.
    use_decorated_box: true # Use DecoratedBox.
    use_enums: true #  (experimental) Use enums rather than classes that behave like enums.
    use_full_hex_values_for_flutter_colors: true # Prefer an 8-digit hexadecimal integer(0xFFFFFFFF) to instantiate Color.
    use_function_type_syntax_for_parameters: true # Use generic function type syntax for parameters.
    use_if_null_to_convert_nulls_to_bools: true # Use if-null operators to convert nulls to bools.
    use_is_even_rather_than_modulo: true # Prefer intValue.isOdd/isEven instead of checking the result of % 2.
    use_late_for_private_fields_and_variables: true #  (experimental)Use late for private members with a non-nullable type.
    use_named_constants: true # Use predefined named constants.
    use_raw_strings: false # Use raw string to avoid escapes.
    use_rethrow_when_possible: false # Use rethrow to rethrow a caught exception.
    use_setters_to_change_properties: false # Use a setter for operations that conceptually change a property.
    use_string_buffers: false # Use string buffers to compose strings.
    use_super_parameters: true #  (experimental)Use super-initializer parameters where possible.
    use_test_throws_matchers: true # Use throwsA matcher instead of fail().
    use_to_and_as_if_applicable: true # Start the name of the method with to/_to or as/_as if applicable.
    void_checks: true # 

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options